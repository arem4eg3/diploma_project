stages:
  - test
  - build
  - release
  - deploy
  - notify

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  SAST_EXCLUDED_ANALYZERS: "nodejs-scan"

# Запуск проверки безопасности SAST
semgrep-sast:
  stage: test
  trigger:
    include:
      - template: Security/SAST.gitlab-ci.yml

# Запуск проверки Сонаром
sonarqube-backend-sast:
  stage: test
  tags:
    - k8s
  image:
    name: sonarsource/sonar-scanner-cli:4.6
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" 
    GIT_DEPTH: "0"
  script:
    - cd backend
    - |
        sonar-scanner \
          -Dsonar.projectKey=$SONAR_BACKEND_KEY \
          -Dsonar.sources=. \
          -Dsonar.host.url=$SONAR_URL \
          -Dsonar.login=$SONAR_BACKEND_LOGIN 

# unit-test and build
build-backend:
  stage: build
  tags:
    - k8s
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/backend"
      --dockerfile "${CI_PROJECT_DIR}/backend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/momo-store-backend:$CI_COMMIT_SHORT_SHA"
      --build-arg VERSION=$VERSION
  needs:
    - sonarqube-backend-sast
    - semgrep-sast

release-backend:
  variables:
    GIT_STRATEGY: none
  tags:
    - k8s
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [ "" ]
  cache: [ ]
  stage: release
  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - crane tag $CI_REGISTRY_IMAGE/momo-store-backend:$CI_COMMIT_SHORT_SHA $VERSION
    - crane tag $CI_REGISTRY_IMAGE/momo-store-backend:$CI_COMMIT_SHORT_SHA latest
  needs: 
    - build-backend

deploy-backend:
  stage: deploy
  image: alpine/helm
  tags:
    - k8s
  script:
    - |
        helm repo add nexus $NEXUS_BACKEND_HELM_URL --username $NEXUS_USERNAME --password $NEXUS_PASSWORD
        helm repo update
        helm upgrade --install momo-store-backend \
        --atomic --timeout 15m \
        --set containers.tag=$VERSION -n default \
        --set secret.dockerconfigjson=$DOCKER_CONFIG_SECRET \
        nexus/momo-store-backend
  needs:
    - release-backend

#Отправка сообщения в Telegram
telegram-notification-backend:
  stage: notify
  image: alpine/curl
  tags:
    - k8s
  script:
    - |      
      curl -X POST -H 'Content-type: application/json' --data \
      '{"chat_id": "'${TELEGRAM_CHAT_ID}'", "text": "New backend version deployed in Kubernetes." }' \
      https://api.telegram.org/bot${TELEGRAM_BOT_ID}/sendMessage
  needs:
    - deploy-backend
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /send notification/
