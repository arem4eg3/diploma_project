stages:
  - test
  - build
  - release
  - deploy
  - notify

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  SAST_EXCLUDED_ANALYZERS: "semgrep-sast"

# Запуск проверки безопасности SAST
nodejs-scan-sast:
  stage: test
  trigger:
    include:
      - template: Security/SAST.gitlab-ci.yml
      
# Запуск проверки Сонаром
sonarqube-frontend-sast:
  stage: test
  tags:
    - k8s
  image:
    name: sonarsource/sonar-scanner-cli:4.6
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" 
    GIT_DEPTH: "0"
  script:
    - cd frontend
    - |
        sonar-scanner \
          -Dsonar.projectKey=$SONAR_FRONTEND_KEY \
          -Dsonar.sources=. \
          -Dsonar.host.url=$SONAR_URL \
          -Dsonar.login=$SONAR_FRONTEND_LOGIN

build-frontend:
  stage: build
  tags:
    - k8s
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - VERSION=$(awk -F'"' '/"version"/ {print $4}' ${CI_PROJECT_DIR}/frontend/package.json | sed 's/.$//')${CI_PIPELINE_ID}
    - echo "VERSION=$VERSION" >> variables.env
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/frontend"
      --dockerfile "${CI_PROJECT_DIR}/frontend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/momo-store-frontend:$CI_COMMIT_SHORT_SHA"
      --build-arg VERSION=$VERSION
  artifacts:
    reports:
      dotenv: variables.env
  needs:
    - nodejs-scan-sast
    - sonarqube-frontend-sast

release-frontend:
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [ "" ]
  cache: [ ]
  stage: release
  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - crane tag $CI_REGISTRY_IMAGE/momo-store-frontend:$CI_COMMIT_SHORT_SHA $VERSION
    - crane tag $CI_REGISTRY_IMAGE/momo-store-frontend:$CI_COMMIT_SHORT_SHA latest
  needs: 
    - build-frontend

deploy-frontend:
  stage: deploy
  image: alpine/helm
  tags:
    - k8s
  script:
    - |
        helm repo add nexus $NEXUS_FRONTEND_HELM_URL --username $NEXUS_USERNAME --password $NEXUS_PASSWORD
        helm repo update 
        helm upgrade --install momo-store-frontend \
        --atomic --timeout 15m \
        --set containers.tag=$VERSION -n default \
        nexus/momo-store-frontend
  environment: 
    name: review/momo-store
    url: https://momo-store.artem4eg.cc
    auto_stop_in: 1 week
  needs:
    - release-frontend

#Отправка сообщения в Telegram
telegram-notification-backend:
  stage: notify
  image: alpine/curl
  tags:
    - k8s
  script:
    - |      
      curl -X POST -H 'Content-type: application/json' --data \
      '{"chat_id": "'${TELEGRAM_CHAT_ID}'", "text": "New frontend version deployed in Kubernetes." }' \
      https://api.telegram.org/bot${TELEGRAM_BOT_ID}/sendMessage
  needs:
    - deploy-frontend
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /send notification/
